#!/bin/bash

if [ -f /etc/mcss.conf ]; then
  source /etc/mcss.conf
fi

DAEMON=${DAEMON:-0}
export SCREENDIR=/var/lib/mcss/

if [ ! -z ${NO_FORK} ]; then
  SERVER_PATH=$1
  ACTION=$2
  OVERRIDE_DEST=$3
elif [ -f $(dirname $0)/settings.mcss ]; then
  SERVER_PATH=$(dirname $0)

  ACTION=$1
  OVERRIDE_DEST=$2
else
  SERVER_PATH=$1
  if [ ! -d ${SERVER_PATH} ]; then
    echo "Server path does not exist.  Please specify a valid server path."
    exit 1
  fi

  ACTION=$2
  OVERRIDE_DEST=$3
fi

if [ ! -f ${SERVER_PATH}/settings.mcss ]; then
  cat /usr/local/share/mcss/settings.mcss.example > ${SERVER_PATH}/settings.mcss
  #Exit here so that they can adjust the settings
  echo "Default settings copied to ${SERVER_PATH}/settings.mcss"
  echo "Adjust options and try again"
  exit 1
fi

source ${SERVER_PATH}/settings.mcss

SCREEN_NAME=${SCREEN_NAME_PREFIX}$(basename ${SERVER_PATH})
if [ -z ${SCREEN_NAME} ]; then
  echo "Error: ${SCREEN_NAME} unset."
fi

JAR_TYPE=${JAR_TYPE:-vanilla}

function base_command()
{
  COMMAND=$(echo $1 | awk -F '-' '{print $2}')
  if [ -z ${COMMAND} ]; then
    COMMAND=$1
  fi
  echo ${COMMAND}
}

function send_command()
{
  case $1 in
    /say)
      case ${JAR_TYPE} in
        bungeecord)
	  CMD="alert"
	  ;;
        *)
	  CMD=${1}
      esac
      ;;
    /stop)
      case ${JAR_TYPE} in
        bungeecord)
	  CMD="end"
	  ;;
	*)
	  CMD=${1}
      esac
      ;;
    /save-off)
      send_command "/say" "Starting world backup."
      CMD=${1}
      ;;
    *)
      CMD=${1}
  esac

  # bukkit servers don't like the / in front
  if [[ ${JAR_TYPE} == "bukkit" ]]; then
    CMD=${CMD#"/"}
  fi

  _send_command ${CMD} $2

  case $1 in
    /save-all)
      # Give it time to save.  This could be replaced with a listener on the 
      # screen to watch for '[Server thread/INFO]: Saved the world'
      sleep 3
      ;;
    /save-on)
      send_command "/say" "World backup completed."
      ;;
  esac
}

function _send_command()
{
  SCREEN_CMD="screen -x ${SCREEN_NAME} -p 0 -X stuff"
  if screen -list | grep -q ${SCREEN_NAME} ; then
    ${SCREEN_CMD} "$1"
    if [ ! -z "$2" ]; then
      ${SCREEN_CMD} " $2"
    fi
    ${SCREEN_CMD} "`printf '\r'`"
  fi
}

function start()
{
  # first check it's not already running, then start
  # if it is running, wait and try again
  # but don't wait longer than WAIT_TIMEOUT seconds

  cd ${SERVER_PATH}
  if [ -f ${JAR_PATH} ]; then
    screen -DmS ${SCREEN_NAME} java -server ${JAVA_OPTS} -jar ${JAR_PATH} nogui &
    echo $! > screen.pid
  else
    echo "JAR_PATH does not exist."
    echo "Set JAR_PATH in ${SERVER_PATH}/settings.mcss"
    exit 1
  fi
}

function stop()
{
  DISPLAY_ACTION=$(base_command ${ACTION})
  if [ $1 -eq 1 ]; then
    send_command "/say" "Server will ${DISPLAY_ACTION} in 15 minutes."; sleep 300
    send_command "/say" "Server will ${DISPLAY_ACTION} in 10 minutes."; sleep 300
    send_command "/say" "Server will ${DISPLAY_ACTION} in 5 minutes."; sleep 240
    send_command "/say" "Server will ${DISPLAY_ACTION} in 1 minute."; sleep 30
    send_command "/say" "Server will ${DISPLAY_ACTION} in 30 seconds."; sleep 10
    send_command "/say" "Server will ${DISPLAY_ACTION} in 20 seconds."; sleep 10
    send_command "/say" "Server will ${DISPLAY_ACTION} in 10 seconds."; sleep 1
    send_command "/say" "Server will ${DISPLAY_ACTION} in 9 seconds."; sleep 1
    send_command "/say" "Server will ${DISPLAY_ACTION} in 8 seconds."; sleep 1
    send_command "/say" "Server will ${DISPLAY_ACTION} in 7 seconds."; sleep 1
    send_command "/say" "Server will ${DISPLAY_ACTION} in 6 seconds."; sleep 1
    send_command "/say" "Server will ${DISPLAY_ACTION} in 5 seconds."; sleep 1
    send_command "/say" "Server will ${DISPLAY_ACTION} in 4 seconds."; sleep 1
    send_command "/say" "Server will ${DISPLAY_ACTION} in 3 seconds."; sleep 1
    send_command "/say" "Server will ${DISPLAY_ACTION} in 2 seconds."; sleep 1
    send_command "/say" "Server will ${DISPLAY_ACTION} in 1 second."; sleep 1
  fi
  
  send_command "/say" "Server will ${DISPLAY_ACTION} now."
  send_command "/stop"

  #Wait for it to actually stop until WAIT_TIMEOUT
  I=0
  while ps -p $(cat ${SERVER_PATH}/screen.pid) > /dev/null && [ $I -lt ${WAIT_TIMEOUT} ] ; do I=$((I+1)); sleep 1; done
}

function backup()
{
  WORLD_PATH=`grep -s level-name ${SERVER_PATH}/server.properties | awk -F '=' '{print $2}'`
  WORLD_PATH=${WORLD_PATH:-world}
  BACKUP_TYPE=${1:-${BACKUP_TYPE}}
  BACKUP_DEST=${2:-${BACKUP_PATH}}

  case ${BACKUP_TYPE} in
    rsync)
      if [[ -d ${BACKUP_DEST} || "${BACKUP_DEST}" =~ ":" ]]; then
        rsync -axcH ${SERVER_PATH}/ ${BACKUP_DEST}/ --exclude ${WORLD_PATH}
        
        send_command "/save-off"
        send_command "/save-all"
        
        rsync -axcH ${SERVER_PATH}/${WORLD_PATH}/ ${BACKUP_DEST}/${WORLD_PATH}/

        send_command "/save-on"
      else
        echo "BACKUP_PATH does not exist."
        echo "Set BACKUP_PATH in ${SERVER_PATH}/settings.mcss"
        exit 1
      fi
      ;;
    zfs)
      send_command "/save-off"
      send_command "/save-all"

      zfs snap ${BACKUP_DEST}@$(date +%y%m%d-%H%M)

      send_command "/save-on"
      ;;
    *)
      echo "Unknown backup type: ${BACKUP_TYPE}. Valid backup types are: rsync, zfs."
      exit 1
  esac
}

function connect_screen()
{
  screen -r ${SCREEN_NAME}
}

case ${ACTION} in
  start)
    start
    ;;
  stop)
    stop 0
    ;;
  restart)
    stop 0
    start
    ;;
  screen)
    connect_screen
    ;;
  backup)
    if [[ -z ${OVERRID_DEST} ]]; then
      backup
    else
      backup rsync ${OVERRIDE_DEST}
    fi
    ;;
  warn-stop)
    if [ -z ${NO_FORK} ]; then
      echo "Server will $(base_command ${ACTION}) in 15 minutes."
      NO_FORK=1 $0 ${SERVER_PATH} ${ACTION} &
    else
      stop 1
    fi
    ;;
  warn-restart)
    if [ -z ${NO_FORK} ]; then
      echo "Server will $(base_command ${ACTION}) in 15 minutes."
      NO_FORK=1 $0 ${SERVER_PATH} ${ACTION} &
    else
      stop 1
      start
    fi
    ;;
  *)
    echo "Unknown command.  Valid commands: start, stop, restart, backup, screen, warn-stop, warn-restart"
    exit 1
esac

exit 0
